# -*- coding: utf-8 -*-
"""Kopie von Transformation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16gLh_IVS_5YGLv8gswMf3CVrulavp-Vs

## Hello , Here you are starting your trip in Matrix Transformations 

We  Want to build Some Functions over here that will apply some Mathematics !

# Standard Scaler 

1- Build a Function that takes an input Array and Returns  The Mean and Standard Devation .
"""

import numpy as np
import math
#sample_data
X_train= np.array([10,20,30,40,50,60,70,80,90])
X_test= np.array([7,15,23,34,45,66,17,83,49])

def mean(x):
  #print('Type of X :',type(x))
  Mean_x= sum(x) / len(x)
  #Here, I am just trying to check your code vs Numpy 
  # print('Check your Mean  :',Mean_x-np.mean(x),' The Answer should be 0 ')
  return  Mean_x
def std(x):
  # print('Mean of X :',mean(x)) 
  me = mean(x)
  var = sum([math.pow(i - me,2) for i in x]) / len(x)
  std_x = math.sqrt(var)
  #check your code vs Numpy 
  # print('Check your Standard Deviation  :',std_x - np.std(x),' The Answer should be 0 ')
  return std_x

# TEST
mean(X_train)

# TEST
std(X_train)

"""## Standardize
2- Build a Function that takes an input Array , Mean, STD and Returns The Array After Scaling 

 by using this equation
 
Scaled =(X-Mean(X))/STD(X)
"""

def StandardScalertransform(x):
  me = mean(x)
  std_ = std(x)
  scaled = (x - me) / std_
  return scaled

# StandardScalertransform(X_train)

# from sklearn.preprocessing import StandardScaler
# scaler = StandardScaler()
# scaled = scaler.fit_transform(X_train.reshape(-1, 1))
# print(scaled)

Scaled=StandardScalertransform(X_train)
print('Check your Result here :',np.std(Scaled) ,' The Answer Should  be equal to 1.0')

"""# Normalize

Formula = (x -min)/( max - min)
"""

def minMaxScaler(x):
  normalized = (x - min(x)) / (max(x) - min(x))
  return normalized

# mm=minMaxScaler(X_train)
# print(mm)
# print('to Check if you are right :-\n' ' The Minimum ',np.min(mm),'The Value should be 0\n', 'The Maximum ' ,np.max(mm), ' The Value should be 1 ')

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
scaled = scaler.fit_transform(X_train.reshape(-1, 1))
# print(scaled)

"""# Master Task 
Make A Class called `Transformer` That takes The last 2 Functions  as Methods for the Class.
"""

class Transformer():
  # Attributes
  def __init__ ( self ,x):
    self.x = x
    self.me = mean(x) 
    self.std_ = std(x) 
  def StandardScalertransform(self):
    scaled = (self.x - self.me) / self.std_
    return scaled
  def minMaxScaler(self):
     normalized = (self.x - min(self.x)) / (max(self.x) - min(self.x))
     return normalized

# T=Transformer(X_train)
# sc = T.StandardScalertransform()
# np.std(sc) #to check if the Result equal to 1

# mm = T.minMaxScaler()
# print('to Check if:-\n' ' The Minimum ',np.min(mm),'The Value should be 0\n', 'The Maximum ' ,np.max(mm), ' The Value should be 1 ')

